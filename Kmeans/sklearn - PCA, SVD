from sklearn.preprocessing import StandardScaler 
from sklearn.decomposition import PCA

## Plot the captured variance with respect to increasing latent dimensionality ##
ft = a2.iloc[:,0:7]
gt = a2.iloc[:,7]

# Normalize features(ft)
ft_std = StandardScaler().fit_transform(ft)

# Run PCA all observed dimension
pca_test = PCA(n_components=7)
pca_test.fit(ft_std)

# Variance that each principal component explains
var_test = pca_test.explained_variance_ratio_
print('The variance that each principal component explains are', var_test)

#Cumulative Variances
cummulative_var = np.cumsum(np.round(pca_test.explained_variance_ratio_, decimals=5)*100)
print('The cummulative variance are', cummulative_var)

#Plot cummulative variances
plt.plot(cummulative_var, marker = 'x')
plt.xlabel("Principal components")
plt.ylabel("Cummulative Variances")

## What is the minimum dimension that captures at least 89% variance? ##
pca_89 = PCA(n_components=0.89)
Z89 = pca_89.fit_transform(ft_std)
print(Z89.shape)
print('The minimum dimensions that captures at least 89% variance are',3)

## What is the minimum dimension that captures at least 99% variance? ##
pca_99 = PCA(n_components=0.99)
Z99 = pca_99.fit_transform(ft_std)
print(Z99.shape)
print('The minimum dimensions that captures at least 99% variance are',4)

# Determine the purity of clusters formed by the number of principal components which captured 89% variances ##
Kmean_89 = KMeans(n_clusters=3, random_state = 0, max_iter = 1000)
Kmean_89.fit(Z89)
predict8 = Kmean_89.predict(Z89)

#Calculate purity
Purity8 = purity(gt,predict8)

# Determine the purity of clusters formed by the number of principal components which captured 99% variances ##
Kmean_99 = KMeans(n_clusters=3, random_state = 0, max_iter = 1000)
Kmean_99.fit(Z99)
predict9 = Kmean_99.predict(Z99)

#Calculate purity
Purity9 = purity(gt,predict9)

#Plot a line graph of the purity scores against the captured variances#
point1 = [0.89, Purity8]
point2 = [0.99, Purity9]

x = [point1[0], point2[0]]
y = [point1[1], point2[1]]

plt.plot(x,y, marker ='o')
plt.title('Purity score vs Variances')
plt.xlabel('Captured variances')
plt.ylabel('Purity score')
plt.show()

print('The purity score of 3 principal components capturing 89% variances is', Purity8)
print('The purity score of 4 principal components capturing 99% variances is', Purity9)
print('Based on line chart, our finding is that the more variances captured, which means more principal components used, the higher purity score, the better K means result')
print('Further checking to enhance above finding, we calculate that the purity of using 2 component is same as using 3 components, and purity of using 1 component is 0.8571428571428571')

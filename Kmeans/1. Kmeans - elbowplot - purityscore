# Import packages
import numpy as np
import pandas as pd
import sklearn as sk
import matplotlib.pyplot as plt
import pyclustering

## Import csv to data frame ##
a2 = pd.read_csv('clustering.csv') 

## Separate the class and feature matrix ##
a2_feature = a2.iloc[:,0:7]
a2_class = a2.iloc[:,7]

# Preprocessing process - Normalization
from sklearn.preprocessing import StandardScaler
a2_norm = StandardScaler().fit_transform(a2_feature)

## Determine the number of clusters ##

from sklearn.cluster import KMeans

SSE = []
K = range(1,10)
for k in K:
    Elbow_method = KMeans(n_clusters = k, random_state = 0, max_iter = 1000).fit(a2_norm)
    SSE.append(Elbow_method.inertia_)
    
plt.figure(figsize=(8,4))
plt.plot(K, SSE, 'bx-')
plt.xlabel('Number of clusters')
plt.ylabel('Sum of Squared Errors')
plt.title('Elbow method - Optimal k')
plt.show()


############################
# Develop purity function #
from sklearn import metrics
def purity(y_true, y_predicted):
    # create confusion matrix
    cont_matrix = metrics.cluster.contingency_matrix(y_true, y_predicted)
    print (cont_matrix)
    # calculate purity
    return np.sum(np.amax(cont_matrix, axis=0)) / np.sum(cont_matrix)
    
## Perform K-Means clustering ##
Model_kmean = KMeans(n_clusters=3, random_state = 0, max_iter = 1000)
Model_kmean.fit(a2_norm)
predict = Model_kmean.predict(a2_norm)

## Compute purity score ##
Purity = purity(a2_class,predict)
print('The purity score is', Purity)
    
